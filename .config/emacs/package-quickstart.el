;;; Quickstart file to activate all packages at startup  -*- lexical-binding:t -*-
;; ¡¡ This file is autogenerated by `package-quickstart-refresh', DO NOT EDIT !!

(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/vterm-20241218.331/vterm-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'vterm-module-compile "vterm" "\
Compile vterm-module." t)
(autoload 'vterm--bookmark-handler "vterm" "\
Handler to restore a vterm bookmark BMK.

If a vterm buffer of the same name does not exist, the function will create a
new vterm buffer of the name. It also checks the current directory and sets
it to the bookmarked directory if needed.

(fn BMK)")
(autoload 'vterm-next-error-function "vterm" "\
Advance to the next error message and visit the file where the error was.
This is the value of `next-error-function' in Compilation
buffers.  Prefix arg N says how many error messages to move
forwards (or backwards, if negative).

Optional argument RESET clears all the errors.

(fn N &optional RESET)" t)
(autoload 'vterm "vterm" "\
Create an interactive Vterm buffer.
Start a new Vterm session, or switch to an already active
session.  Return the buffer selected (or created).

With a nonnumeric prefix arg, create a new session.

With a string prefix arg, create a new session with arg as buffer name.

With a numeric prefix arg (as in `C-u 42 M-x vterm RET'), switch
to the session with that number, or create it if it doesn't
already exist.

The buffer name used for Vterm sessions is determined by the
value of `vterm-buffer-name'.

(fn &optional ARG)" t)
(autoload 'vterm-other-window "vterm" "\
Create an interactive Vterm buffer in another window.
Start a new Vterm session, or switch to an already active
session.  Return the buffer selected (or created).

With a nonnumeric prefix arg, create a new session.

With a string prefix arg, create a new session with arg as buffer name.

With a numeric prefix arg (as in `C-u 42 M-x vterm RET'), switch
to the session with that number, or create it if it doesn't
already exist.

The buffer name used for Vterm sessions is determined by the
value of `vterm-buffer-name'.

(fn &optional ARG)" t)
(register-definition-prefixes "vterm" '("vterm-"))


(provide 'vterm-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/vterm-toggle-20230912.246/vterm-toggle-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'vterm-toggle "vterm-toggle" "\
Vterm toggle.
Optional argument ARGS .

(fn &optional ARGS)" t)
(autoload 'vterm-toggle-cd "vterm-toggle" "\
Vterm toggle and insert a cd command.
Optional argument ARGS .

(fn &optional ARGS)" t)
(autoload 'vterm-toggle-insert-cd "vterm-toggle" "\
Cd to the directory where your previous buffer file exists.
after you have toggle to the vterm buffer with `vterm-toggle'." t)
(autoload 'vterm-toggle-forward "vterm-toggle" "\
Go to the next term buffer.
If OFFSET is `non-nil', will goto next term buffer with OFFSET.

(fn &optional OFFSET)" t)
(autoload 'vterm-toggle-backward "vterm-toggle" "\
Go to the previous term buffer.
If OFFSET is `non-nil', will goto next term buffer with OFFSET.

(fn &optional OFFSET)" t)
(register-definition-prefixes "vterm-toggle" '("vterm-"))


(provide 'vterm-toggle-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/vertico-20250610.2029/vertico-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar vertico-mode nil "\
Non-nil if Vertico mode is enabled.
See the `vertico-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-mode'.")
(custom-autoload 'vertico-mode "vertico" nil)
(autoload 'vertico-mode "vertico" "\
VERTical Interactive COmpletion.

This is a global minor mode.  If called interactively, toggle the
`Vertico mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico" '("vertico-"))



(defvar vertico-buffer-mode nil "\
Non-nil if Vertico-Buffer mode is enabled.
See the `vertico-buffer-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-buffer-mode'.")
(custom-autoload 'vertico-buffer-mode "vertico-buffer" nil)
(autoload 'vertico-buffer-mode "vertico-buffer" "\
Display Vertico like a regular buffer in a large window.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Buffer mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-buffer-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-buffer" '("vertico-buffer-"))



(autoload 'vertico-directory-enter "vertico-directory" "\
Enter directory or exit completion with current candidate.
Exit with current input if prefix ARG is given.

(fn &optional ARG)" t)
(autoload 'vertico-directory-up "vertico-directory" "\
Delete N names before point.

(fn &optional N)" t)
(autoload 'vertico-directory-delete-char "vertico-directory" "\
Delete N directories or chars before point.

(fn N)" t)
(autoload 'vertico-directory-delete-word "vertico-directory" "\
Delete N directories or words before point.

(fn N)" t)
(autoload 'vertico-directory-tidy "vertico-directory" "\
Tidy shadowed file name, see `rfn-eshadow-overlay'.")



(defvar vertico-flat-mode nil "\
Non-nil if Vertico-Flat mode is enabled.
See the `vertico-flat-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-flat-mode'.")
(custom-autoload 'vertico-flat-mode "vertico-flat" nil)
(autoload 'vertico-flat-mode "vertico-flat" "\
Flat, horizontal display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Flat mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-flat-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-flat" '("vertico-flat-"))



(defvar vertico-grid-mode nil "\
Non-nil if Vertico-Grid mode is enabled.
See the `vertico-grid-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-grid-mode'.")
(custom-autoload 'vertico-grid-mode "vertico-grid" nil)
(autoload 'vertico-grid-mode "vertico-grid" "\
Grid display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Grid mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-grid-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-grid" '("vertico-grid-"))



(defvar vertico-indexed-mode nil "\
Non-nil if Vertico-Indexed mode is enabled.
See the `vertico-indexed-mode' command
for a description of this minor mode.")
(custom-autoload 'vertico-indexed-mode "vertico-indexed" nil)
(autoload 'vertico-indexed-mode "vertico-indexed" "\
Prefix candidates with indices.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Indexed mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-indexed-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-indexed" '("vertico-indexed-"))



(defvar vertico-mouse-mode nil "\
Non-nil if Vertico-Mouse mode is enabled.
See the `vertico-mouse-mode' command
for a description of this minor mode.")
(custom-autoload 'vertico-mouse-mode "vertico-mouse" nil)
(autoload 'vertico-mouse-mode "vertico-mouse" "\
Mouse support for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Mouse mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-mouse-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-mouse" '("vertico-mouse-"))



(defvar vertico-multiform-mode nil "\
Non-nil if Vertico-Multiform mode is enabled.
See the `vertico-multiform-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-multiform-mode'.")
(custom-autoload 'vertico-multiform-mode "vertico-multiform" nil)
(autoload 'vertico-multiform-mode "vertico-multiform" "\
Configure Vertico in various forms per command.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Multiform mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-multiform-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-multiform" '("vertico-multiform-"))



(autoload 'vertico-quick-jump "vertico-quick" "\
Jump to candidate using quick keys." t)
(autoload 'vertico-quick-exit "vertico-quick" "\
Exit with candidate using quick keys." t)
(autoload 'vertico-quick-insert "vertico-quick" "\
Insert candidate using quick keys." t)
(register-definition-prefixes "vertico-quick" '("vertico-quick"))



(autoload 'vertico-repeat-save "vertico-repeat" "\
Save Vertico session for `vertico-repeat'.
This function must be registered as `minibuffer-setup-hook'.")
(autoload 'vertico-repeat-next "vertico-repeat" "\
Repeat Nth next Vertico completion session.
This command must be called from an existing Vertico session
after `vertico-repeat-previous'.

(fn N)" t)
(autoload 'vertico-repeat-previous "vertico-repeat" "\
Repeat Nth previous Vertico completion session.
If called from an existing Vertico session, restore the input and
selected candidate for the current command.

(fn N)" t)
(autoload 'vertico-repeat-select "vertico-repeat" "\
Select a Vertico session from the session history and repeat it.
If called from an existing Vertico session, you can select among
previous sessions for the current command." t)
(autoload 'vertico-repeat "vertico-repeat" "\
Repeat last Vertico session.
If prefix ARG is non-nil, offer completion menu to select from session history.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-repeat" '("vertico-repeat-"))



(defvar vertico-reverse-mode nil "\
Non-nil if Vertico-Reverse mode is enabled.
See the `vertico-reverse-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-reverse-mode'.")
(custom-autoload 'vertico-reverse-mode "vertico-reverse" nil)
(autoload 'vertico-reverse-mode "vertico-reverse" "\
Reverse the Vertico display.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Reverse mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-reverse-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-reverse" '("vertico-reverse-map"))



 (autoload 'vertico-sort-history-length-alpha "vertico-sort")
 (autoload 'vertico-sort-history-alpha "vertico-sort")
 (autoload 'vertico-sort-length-alpha "vertico-sort")
 (autoload 'vertico-sort-alpha "vertico-sort")
(register-definition-prefixes "vertico-sort" '("vertico-sort-"))



(autoload 'vertico-suspend "vertico-suspend" "\
Suspend the current completion session.
If the command is invoked from within the Vertico minibuffer, the
current session is suspended.  If the command is invoked from
outside the minibuffer, the active minibuffer is either selected
or the latest completion session is restored." t)
(register-definition-prefixes "vertico-suspend" '("vertico-suspend--"))



(defvar vertico-unobtrusive-mode nil "\
Non-nil if Vertico-Unobtrusive mode is enabled.
See the `vertico-unobtrusive-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-unobtrusive-mode'.")
(custom-autoload 'vertico-unobtrusive-mode "vertico-unobtrusive" nil)
(autoload 'vertico-unobtrusive-mode "vertico-unobtrusive" "\
Unobtrusive display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Unobtrusive mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-unobtrusive-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-unobtrusive" '("vertico-unobtrusive--restore"))


(provide 'vertico-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/tsc-20220212.1632/tsc-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "tsc" '("tsc-"))



(register-definition-prefixes "tsc-dyn-get" '("tsc-"))


(provide 'tsc-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/tree-sitter-20220212.1632/tree-sitter-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'tree-sitter-mode "tree-sitter" "\
Minor mode that keeps an up-to-date syntax tree using incremental parsing.

This is a minor mode.  If called interactively, toggle the `tree-sitter
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `tree-sitter-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'turn-on-tree-sitter-mode "tree-sitter" "\
Turn on `tree-sitter-mode' in a buffer, if possible.")
(put 'global-tree-sitter-mode 'globalized-minor-mode t)
(defvar global-tree-sitter-mode nil "\
Non-nil if Global Tree-Sitter mode is enabled.
See the `global-tree-sitter-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-tree-sitter-mode'.")
(custom-autoload 'global-tree-sitter-mode "tree-sitter" nil)
(autoload 'global-tree-sitter-mode "tree-sitter" "\
Toggle Tree-Sitter mode in all buffers.
With prefix ARG, enable Global Tree-Sitter mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Tree-Sitter mode is enabled in all buffers where
`turn-on-tree-sitter-mode' would do it.

See `tree-sitter-mode' for more information on Tree-Sitter mode.

(fn &optional ARG)" t)
(define-obsolete-function-alias 'tree-sitter-node-at-point 'tree-sitter-node-at-pos "2021-08-30")
(autoload 'tree-sitter-node-at-pos "tree-sitter" "\
Return the smallest syntax node of type NODE-TYPE at POS.
NODE-TYPE may be a symbol, corresponding to a named syntax node; a string,
corresponding to an anonymous node, or a keyword, holding a special value. For
the special value `:named', return the smallest named node at POS. For the
special value `:anonymous', return the smallest anonymous node at POS. IF POS is
nil, POS defaults to the point. Unless IGNORE-INVALID-TYPE is non-nil, signal an
error when a specified named NODE-TYPE does not exist in the current grammar.
Whenever NODE-TYPE is non-nil (other than `:named'), it is possible for the
function to return nil.

(fn &optional NODE-TYPE POS IGNORE-INVALID-TYPE)")
(register-definition-prefixes "tree-sitter" '("tree-sitter-"))



(register-definition-prefixes "tree-sitter-cli" '("tree-sitter-cli-"))



(autoload 'tree-sitter-debug-mode "tree-sitter-debug" "\
Toggle syntax tree debugging for the current buffer.

This mode displays the syntax tree in another buffer, and keeps it up-to-date.

This is a minor mode.  If called interactively, toggle the
`Tree-Sitter-Debug mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `tree-sitter-debug-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'tree-sitter-debug-query "tree-sitter-debug" "\
Execute query PATTERNS against the current syntax tree and return captures.

If the optional arg MATCHES is non-nil, matches (from `tsc-query-matches') are
returned instead of captures (from `tsc-query-captures').

If the optional arg TAG-ASSIGNER is non-nil, it is passed to `tsc-make-query' to
assign custom tags to capture names.

This function is primarily useful for debugging purpose. Other packages should
build queries and cursors once, then reuse them.

(fn PATTERNS &optional MATCHES TAG-ASSIGNER)")
(register-definition-prefixes "tree-sitter-debug" '("tree-sitter-debug-"))



(autoload 'tree-sitter-save-excursion "tree-sitter-extras" "\
Save the current location within the syntax tree; execute BODY; restore it.

If the original location cannot be restored due to the syntax tree changing too
much, this macro behaves like `save-excursion', unless
`tree-sitter-save-excursion-try-hard' is non-nil, in which case it tries to get
as close as possible to the original location.

After the location is restored, the buffer text is scrolled so that point stays
at roughly the same vertical screen position. If `pixel-scroll' is available and
`tree-sitter-save-excursion-pixelwise' is non-nil, pixelwise scrolling is used
instead, to make this restoration exact.

(fn &rest BODY)" nil t)
(function-put 'tree-sitter-save-excursion 'lisp-indent-function 0)
(register-definition-prefixes "tree-sitter-extras" '("tree-sitter-"))



(autoload 'tree-sitter-hl-add-patterns "tree-sitter-hl" "\
Add custom syntax highlighting PATTERNS.
If LANG-SYMBOL is non-nil, it identifies the language that PATTERNS should be
applied to. If LANG-SYMBOL is nil, PATTERNS are applied to the current buffer,
and are prioritized over language-specific patterns. Either way, PATTERNS are
prioritized over `tree-sitter-hl-default-patterns'.

This function should be used by minor modes and configuration code. Major modes
should set `tree-sitter-hl-default-patterns' instead.

(fn LANG-SYMBOL PATTERNS)")
(function-put 'tree-sitter-hl-add-patterns 'lisp-indent-function 1)
(autoload 'tree-sitter-hl-mode "tree-sitter-hl" "\
Toggle syntax highlighting based on Tree-sitter's syntax tree.

If `tree-sitter-hl-default-patterns' is nil, turning on this mode does nothing,
and does not interfere with `font-lock-mode'.

Enabling this automatically enables `tree-sitter-mode' in the buffer.

To enable this automatically whenever `tree-sitter-mode' is enabled:

 (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

This is a minor mode.  If called interactively, toggle the
`Tree-Sitter-Hl mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `tree-sitter-hl-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "tree-sitter-hl" '("tree-sitter-hl-"))



(autoload 'tree-sitter-require "tree-sitter-load" "\
Return the language object loaded and registered under the name LANG-SYMBOL.
If the language has not been loaded yet, load it with `tree-sitter-load'.

FILE should be the base name (without extension) of the native shared library
that exports the language as the native symbol NATIVE-SYMBOL-NAME.

If FILE is nil, the base name is assumed to be LANG-SYMBOL's name.

If NATIVE-SYMBOL-NAME is nil, the name of the exported native symbol is assumed
to be LANG-SYMBOL's name, prefixed with \"tree_sitter_\".

(fn LANG-SYMBOL &optional FILE NATIVE-SYMBOL-NAME)")
(register-definition-prefixes "tree-sitter-load" '("tree-sitter-l"))



(autoload 'tree-sitter-query-builder "tree-sitter-query" "\
Provide means for developers to write and test tree-sitter queries.

The buffer on focus when the command is called is set as the target buffer." t)
(register-definition-prefixes "tree-sitter-query" '("tree-sitter-"))


(provide 'tree-sitter-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/tree-sitter-langs-20250608.1254/tree-sitter-langs-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'tree-sitter-langs--init-load-path "tree-sitter-langs" "\
Add the directory containing compiled grammars to `tree-sitter-load-path'.

(fn &rest ARGS)")
(advice-add 'tree-sitter-load :before #'tree-sitter-langs--init-load-path)
(autoload 'tree-sitter-langs--init-major-mode-alist "tree-sitter-langs" "\
Link known major modes to languages provided by the bundle.

(fn &rest ARGS)")
(advice-add 'tree-sitter--setup :before #'tree-sitter-langs--init-major-mode-alist)
(autoload 'tree-sitter-langs--set-hl-default-patterns "tree-sitter-langs" "\
Use syntax highlighting patterns provided by `tree-sitter-langs'.

(fn &rest ARGS)")
(advice-add 'tree-sitter-hl--setup :before #'tree-sitter-langs--set-hl-default-patterns)
(register-definition-prefixes "tree-sitter-langs" '("tree-sitter-langs-"))



(autoload 'tree-sitter-langs-install-grammars "tree-sitter-langs-build" "\
Download and install the specified VERSION of the language grammar bundle.
If VERSION or OS is not specified, use the default of
`tree-sitter-langs--bundle-version' and `tree-sitter-langs--os'.

This installs the grammar bundle even if the same version was already installed,
unless SKIP-IF-INSTALLED is non-nil.

The download bundle file is deleted after installation, unless KEEP-BUNDLE is
non-nil.

(fn &optional SKIP-IF-INSTALLED VERSION OS KEEP-BUNDLE)" t)
(autoload 'tree-sitter-langs-install-latest-grammar "tree-sitter-langs-build" "\
Install the latest version of the tree-sitter-langs grammar bundle.
Automatically retrieves the latest version tag from GitHub.  If
SKIP-IF-INSTALLED is non-nil, skips if the latest version is already installed.
OS specifies the operating system.  If KEEP-BUNDLE is non-nil, the downloaded
bundle file is not deleted after installation.

(fn &optional SKIP-IF-INSTALLED OS KEEP-BUNDLE)" t)
(register-definition-prefixes "tree-sitter-langs-build" '("tree-sitter-langs-"))


(provide 'tree-sitter-langs-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/spinner-1.7.4/spinner-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'spinner-create "spinner" "\
Create a spinner of the given TYPE.
The possible TYPEs are described in `spinner--type-to-frames'.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

If BUFFER-LOCAL is non-nil, the spinner will be automatically
deactivated if the buffer is killed.  If BUFFER-LOCAL is a
buffer, use that instead of current buffer.

When started, in order to function properly, the spinner runs a
timer which periodically calls `force-mode-line-update' in the
current buffer.  If BUFFER-LOCAL was set at creation time, then
`force-mode-line-update' is called in that buffer instead.  When
the spinner is stopped, the timer is deactivated.

DELAY, if given, is the number of seconds to wait after starting
the spinner before actually displaying it. It is safe to cancel
the spinner before this time, in which case it won't display at
all.

(fn &optional TYPE BUFFER-LOCAL FPS DELAY)")
(autoload 'spinner-start "spinner" "\
Start a mode-line spinner of given TYPE-OR-OBJECT.
If TYPE-OR-OBJECT is an object created with `make-spinner',
simply activate it.  This method is designed for minor modes, so
they can use the spinner as part of their lighter by doing:
    '(:eval (spinner-print THE-SPINNER))
To stop this spinner, call `spinner-stop' on it.

If TYPE-OR-OBJECT is anything else, a buffer-local spinner is
created with this type, and it is displayed in the
`mode-line-process' of the buffer it was created it.  Both
TYPE-OR-OBJECT and FPS are passed to `make-spinner' (which see).
To stop this spinner, call `spinner-stop' in the same buffer.

Either way, the return value is a function which can be called
anywhere to stop this spinner.  You can also call `spinner-stop'
in the same buffer where the spinner was created.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

DELAY, if given, is the number of seconds to wait until actually
displaying the spinner. It is safe to cancel the spinner before
this time, in which case it won't display at all.

(fn &optional TYPE-OR-OBJECT FPS DELAY)")
(register-definition-prefixes "spinner" '("spinner-"))


(provide 'spinner-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/simple-modeline-20210312.1048/simple-modeline-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar simple-modeline-mode nil "\
Non-nil if Simple-Modeline mode is enabled.
See the `simple-modeline-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `simple-modeline-mode'.")
(custom-autoload 'simple-modeline-mode "simple-modeline" nil)
(autoload 'simple-modeline-mode "simple-modeline" "\
Minor mode to get a simple mode line.

When called interactively, toggle
`simple-modeline-mode'.  With prefix ARG, enable
`simple-modeline--mode' if ARG is positive, otherwise
disable it.

When called from Lisp, enable `simple-modeline-mode' if ARG is omitted,
nil or positive.  If ARG is `toggle', toggle `simple-modeline-mode'.
Otherwise behave as if called interactively.

(fn &optional ARG)" t)
(register-definition-prefixes "simple-modeline" '("simple-modeline--mode-line"))



(register-definition-prefixes "simple-modeline-core" '("simple-modeline-"))



(register-definition-prefixes "simple-modeline-segments" '("simple-modeline-"))


(provide 'simple-modeline-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/s-20220902.1511/s-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "s" '("s-"))


(provide 's-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/orderless-20250316.2046/orderless-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'orderless-all-completions "orderless" "\
Split STRING into components and find entries TABLE matching all.
The predicate PRED is used to constrain the entries in TABLE.  The
matching portions of each candidate are highlighted.
This function is part of the `orderless' completion style.

(fn STRING TABLE PRED POINT)")
(autoload 'orderless-try-completion "orderless" "\
Complete STRING to unique matching entry in TABLE.
This uses `orderless-all-completions' to find matches for STRING
in TABLE among entries satisfying PRED.  If there is only one
match, it completes to that match.  If there are no matches, it
returns nil.  In any other case it \"completes\" STRING to
itself, without moving POINT.
This function is part of the `orderless' completion style.

(fn STRING TABLE PRED POINT)")
(add-to-list 'completion-styles-alist '(orderless orderless-try-completion orderless-all-completions "Completion of multiple components, in any order."))
(autoload 'orderless-ivy-re-builder "orderless" "\
Convert STR into regexps for use with ivy.
This function is for integration of orderless with ivy, use it as
a value in `ivy-re-builders-alist'.

(fn STR)")
(register-definition-prefixes "orderless" '("orderless-"))



(autoload 'orderless-kwd-dispatch "orderless-kwd" "\
Match COMPONENT against the keywords in `orderless-kwd-alist'.

(fn COMPONENT INDEX TOTAL)")
(register-definition-prefixes "orderless-kwd" '("orderless-kwd-"))


(provide 'orderless-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/markdown-mode-20250606.314/markdown-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'markdown-mode "markdown-mode" "\
Major mode for editing Markdown files.

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))
(autoload 'gfm-mode "markdown-mode" "\
Major mode for editing GitHub Flavored Markdown files.

(fn)" t)
(autoload 'markdown-view-mode "markdown-mode" "\
Major mode for viewing Markdown content.

(fn)" t)
(autoload 'gfm-view-mode "markdown-mode" "\
Major mode for viewing GitHub Flavored Markdown content.

(fn)" t)
(autoload 'markdown-live-preview-mode "markdown-mode" "\
Toggle native previewing on save for a specific markdown file.

This is a minor mode.  If called interactively, toggle the
`Markdown-Live-Preview mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `markdown-live-preview-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "markdown-mode" '("defun-markdown-" "gfm-" "markdown"))


(provide 'markdown-mode-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/marginalia-20250604.1545/marginalia-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar marginalia-mode nil "\
Non-nil if Marginalia mode is enabled.
See the `marginalia-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `marginalia-mode'.")
(custom-autoload 'marginalia-mode "marginalia" nil)
(autoload 'marginalia-mode "marginalia" "\
Annotate completion candidates with richer information.

This is a global minor mode.  If called interactively, toggle the
`Marginalia mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='marginalia-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'marginalia-cycle "marginalia" "\
Cycle between annotators in `marginalia-annotators'." t)
(function-put 'marginalia-cycle 'completion-predicate #'(lambda (&rest _) (> (minibuffer-depth) 1)))
(register-definition-prefixes "marginalia" '("marginalia-"))


(provide 'marginalia-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/lv-20200507.1518/lv-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "lv" '("lv-"))


(provide 'lv-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/dash-20250312.1307/dash-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'dash-fontify-mode "dash" "\
Toggle fontification of Dash special variables.

Dash-Fontify mode is a buffer-local minor mode intended for Emacs
Lisp buffers.  Enabling it causes the special variables bound in
anaphoric Dash macros to be fontified.  These anaphoras include
`it', `it-index', `acc', and `other'.  In older Emacs versions
which do not dynamically detect macros, Dash-Fontify mode
additionally fontifies Dash macro calls.

See also `dash-fontify-mode-lighter' and
`global-dash-fontify-mode'.

This is a minor mode.  If called interactively, toggle the `Dash-Fontify
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `dash-fontify-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-dash-fontify-mode 'globalized-minor-mode t)
(defvar global-dash-fontify-mode nil "\
Non-nil if Global Dash-Fontify mode is enabled.
See the `global-dash-fontify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-dash-fontify-mode'.")
(custom-autoload 'global-dash-fontify-mode "dash" nil)
(autoload 'global-dash-fontify-mode "dash" "\
Toggle Dash-Fontify mode in all buffers.
With prefix ARG, enable Global Dash-Fontify mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Dash-Fontify mode is enabled in all buffers where
`dash--turn-on-fontify-mode' would do it.

See `dash-fontify-mode' for more information on Dash-Fontify mode.

(fn &optional ARG)" t)
(autoload 'dash-register-info-lookup "dash" "\
Register the Dash Info manual with `info-lookup-symbol'.
This allows Dash symbols to be looked up with \\[info-lookup-symbol]." t)
(register-definition-prefixes "dash" '("!cdr" "!cons" "--" "->" "-a" "-butlast" "-c" "-d" "-e" "-f" "-gr" "-i" "-juxt" "-keep" "-l" "-m" "-no" "-o" "-p" "-r" "-s" "-t" "-u" "-value-to-list" "-when-let" "-zip" "dash-"))


(provide 'dash-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/f-20241003.1131/f-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "f" '("f-"))


(provide 'f-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/ht-20230703.558/ht-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "ht" 'nil)


(provide 'ht-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/lsp-mode-20250610.1238/lsp-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "lsp-actionscript" '("lsp-actionscript-"))



(put 'lsp-ada-project-file 'safe-local-variable 'stringp)
(register-definition-prefixes "lsp-ada" '("lsp-ada-"))



(register-definition-prefixes "lsp-angular" '("lsp-client"))



(register-definition-prefixes "lsp-ansible" '("lsp-ansible-"))



(register-definition-prefixes "lsp-asm" '("lsp-asm-"))



(register-definition-prefixes "lsp-astro" '("lsp-astro--get-initialization-options"))



(register-definition-prefixes "lsp-autotools" '("lsp-autotools-"))



(register-definition-prefixes "lsp-awk" '("lsp-awk-executable"))



(register-definition-prefixes "lsp-bash" '("lsp-bash-"))



(register-definition-prefixes "lsp-beancount" '("lsp-beancount-"))



(register-definition-prefixes "lsp-bufls" '("lsp-buf"))



(register-definition-prefixes "lsp-c3" '("lsp-c"))



(register-definition-prefixes "lsp-camel" '("lsp-camel-"))



(autoload 'lsp-cpp-flycheck-clang-tidy-error-explainer "lsp-clangd" "\
Explain a clang-tidy ERROR by scraping documentation from llvm.org.

(fn ERROR)")
(register-definition-prefixes "lsp-clangd" '("lsp-c"))



(autoload 'lsp-clojure-show-test-tree "lsp-clojure" "\
Show a test tree and focus on it if IGNORE-FOCUS? is nil.

(fn IGNORE-FOCUS?)" t)
(autoload 'lsp-clojure-show-project-tree "lsp-clojure" "\
Show a project tree with source-paths and dependencies.
Focus on it if IGNORE-FOCUS? is nil.

(fn IGNORE-FOCUS?)" t)
(register-definition-prefixes "lsp-clojure" '("lsp-clojure-"))



(register-definition-prefixes "lsp-cmake" '("lsp-cmake-"))



(add-hook 'cobol-mode-hook #'lsp-cobol-start-ls)
(autoload 'lsp-cobol-start-ls "lsp-cobol" "\
Start the COBOL language service." t)
(register-definition-prefixes "lsp-cobol" '("lsp-cobol-"))



(define-obsolete-variable-alias 'lsp-prefer-capf 'lsp-completion-provider "\
lsp-mode 7.0.1")
(define-obsolete-variable-alias 'lsp-enable-completion-at-point 'lsp-completion-enable "\
lsp-mode 7.0.1")
(defvar lsp-completion-enable t "\
Enable `completion-at-point' integration.")
(custom-autoload 'lsp-completion-enable "lsp-completion" t)
(autoload 'lsp-completion-at-point "lsp-completion" "\
Get lsp completions.")
(autoload 'lsp-completion--enable "lsp-completion" "\
Enable LSP completion support.")
(autoload 'lsp-completion-mode "lsp-completion" "\
Toggle LSP completion support.

This is a minor mode.  If called interactively, toggle the
`Lsp-Completion mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-completion-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(add-hook 'lsp-configure-hook (lambda nil (when (and lsp-auto-configure lsp-completion-enable) (lsp-completion--enable))))
(register-definition-prefixes "lsp-completion" '("lsp-"))



(autoload 'lsp-copilot-check-status "lsp-copilot" "\
Checks the status of the Copilot Server" t)
(autoload 'lsp-copilot-login "lsp-copilot" "\
Log in with Copilot.

This function is automatically called during the client initialization if needed" t)
(register-definition-prefixes "lsp-copilot" '("lsp-copilot-"))



(register-definition-prefixes "lsp-credo" '("lsp-credo-"))



(register-definition-prefixes "lsp-crystal" '("lsp-clients-crystal-executable"))



(register-definition-prefixes "lsp-csharp" '("lsp-csharp-"))



(register-definition-prefixes "lsp-css" '("lsp-css-"))



(register-definition-prefixes "lsp-cucumber" '("lsp-cucumber-"))



(register-definition-prefixes "lsp-cypher" '("lsp-client--cypher-ls-server-command"))



(define-obsolete-variable-alias 'lsp-diagnostic-package 'lsp-diagnostics-provider "\
lsp-mode 7.0.1")
(define-obsolete-variable-alias 'lsp-flycheck-default-level 'lsp-diagnostics-flycheck-default-level "\
lsp-mode 7.0.1")
(autoload 'lsp-diagnostics-lsp-checker-if-needed "lsp-diagnostics")
(autoload 'lsp-diagnostics--enable "lsp-diagnostics" "\
Enable LSP checker support.")
(autoload 'lsp-diagnostics-mode "lsp-diagnostics" "\
Toggle LSP diagnostics integration.

This is a minor mode.  If called interactively, toggle the
`Lsp-Diagnostics mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-diagnostics-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(add-hook 'lsp-configure-hook (lambda nil (when lsp-auto-configure (lsp-diagnostics--enable))))
(register-definition-prefixes "lsp-diagnostics" '("lsp-diagnostics-"))



(defvar lsp-dired-mode nil "\
Non-nil if Lsp-Dired mode is enabled.
See the `lsp-dired-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-dired-mode'.")
(custom-autoload 'lsp-dired-mode "lsp-dired" nil)
(autoload 'lsp-dired-mode "lsp-dired" "\
Display `lsp-mode' icons for each file in a dired buffer.

This is a global minor mode.  If called interactively, toggle the
`Lsp-Dired mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='lsp-dired-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-dired" '("lsp-dired-"))



(register-definition-prefixes "lsp-dockerfile" '("lsp-dockerfile-language-server-command"))



(register-definition-prefixes "lsp-dot" '("lsp-dot--dot-ls-server-command"))



(register-definition-prefixes "lsp-earthly" '("lsp-earthly-"))



(register-definition-prefixes "lsp-elixir" '("lsp-elixir-"))



(register-definition-prefixes "lsp-elm" '("lsp-"))



(register-definition-prefixes "lsp-emmet" '("lsp-emmet-ls-command"))



(register-definition-prefixes "lsp-erlang" '("lsp-erlang-"))



(register-definition-prefixes "lsp-eslint" '("lsp-"))



(register-definition-prefixes "lsp-fennel" '("lsp-fennel--ls-command"))



(register-definition-prefixes "lsp-fortran" '("lsp-clients-"))



(autoload 'lsp-fsharp--workspace-load "lsp-fsharp" "\
Load all of the provided PROJECTS.

(fn PROJECTS)")
(register-definition-prefixes "lsp-fsharp" '("lsp-fsharp-"))



(register-definition-prefixes "lsp-gdscript" '("lsp-gdscript-"))



(register-definition-prefixes "lsp-gleam" '("lsp-gleam-executable"))



(register-definition-prefixes "lsp-glsl" '("lsp-glsl-executable"))



(register-definition-prefixes "lsp-go" '("lsp-go-"))



(register-definition-prefixes "lsp-golangci-lint" '("lsp-golangci-lint-"))



(register-definition-prefixes "lsp-graphql" '("lsp-"))



(register-definition-prefixes "lsp-groovy" '("lsp-groovy-"))



(register-definition-prefixes "lsp-hack" '("lsp-clients-hack-command"))



(register-definition-prefixes "lsp-haxe" '("lsp-"))



(autoload 'lsp-headerline-breadcrumb-mode "lsp-headerline" "\
Toggle breadcrumb on headerline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Headerline-Breadcrumb mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-headerline-breadcrumb-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'lsp-breadcrumb-go-to-symbol "lsp-headerline" "\
Go to the symbol on breadcrumb at SYMBOL-POSITION.

(fn SYMBOL-POSITION)" t)
(autoload 'lsp-breadcrumb-narrow-to-symbol "lsp-headerline" "\
Narrow to the symbol range on breadcrumb at SYMBOL-POSITION.

(fn SYMBOL-POSITION)" t)
(register-definition-prefixes "lsp-headerline" '("lsp-headerline-"))



(register-definition-prefixes "lsp-html" '("lsp-html-"))



(register-definition-prefixes "lsp-hy" '("lsp-clients-hy-server-executable"))



(register-definition-prefixes "lsp-icons" '("lsp-"))



(autoload 'lsp-ido-workspace-symbol "lsp-ido" "\
`ido' for lsp workspace/symbol.
When called with prefix ARG the default selection will be symbol at point.

(fn ARG)" t)
(register-definition-prefixes "lsp-ido" '("lsp-ido-"))



(register-definition-prefixes "lsp-idris" '("lsp-idris2-lsp-"))



(autoload 'lsp-iedit-highlights "lsp-iedit" "\
Start an `iedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t)
(autoload 'lsp-iedit-linked-ranges "lsp-iedit" "\
Start an `iedit' for `textDocument/linkedEditingRange'" t)
(autoload 'lsp-evil-multiedit-highlights "lsp-iedit" "\
Start an `evil-multiedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t)
(autoload 'lsp-evil-multiedit-linked-ranges "lsp-iedit" "\
Start an `evil-multiedit' for `textDocument/linkedEditingRange'" t)
(autoload 'lsp-evil-state-highlights "lsp-iedit" "\
Start `iedit-mode'. for `textDocument/documentHighlight'" t)
(autoload 'lsp-evil-state-linked-ranges "lsp-iedit" "\
Start `iedit-mode'. for `textDocument/linkedEditingRange'" t)
(register-definition-prefixes "lsp-iedit" '("lsp-iedit--on-ranges"))



(autoload 'lsp-inline-completion-display "lsp-inline-completion" "\
Displays the inline completions overlay.

(fn &optional IMPLICIT)" t)
(defvar lsp-inline-completion-enable t "\
If non-nil it will enable inline completions on idle.")
(custom-autoload 'lsp-inline-completion-enable "lsp-inline-completion" t)
(autoload 'lsp-inline-completion-mode "lsp-inline-completion" "\
Mode automatically displaying inline completions.

This is a minor mode.  If called interactively, toggle the
`Lsp-Inline-Completion mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-inline-completion-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(add-hook 'lsp-configure-hook (lambda nil (when (and lsp-inline-completion-enable (lsp-feature? "textDocument/inlineCompletion")) (lsp-inline-completion-mode))))
(autoload 'lsp-inline-completion-company-integration-mode "lsp-inline-completion" "\
Minor mode to be used when company mode is active with lsp-inline-completion-mode.

This is a minor mode.  If called interactively, toggle the
`Lsp-Inline-Completion-Company-Integration mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or negative,
disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-inline-completion-company-integration-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-inline-completion" '("lsp-"))



(register-definition-prefixes "lsp-javascript" '("lsp-"))



(register-definition-prefixes "lsp-jq" '("lsp-clients-jq-server-executable"))



(register-definition-prefixes "lsp-json" '("lsp-"))



(register-definition-prefixes "lsp-jsonnet" '("lsp-clients-jsonnet-server-executable"))



(register-definition-prefixes "lsp-kotlin" '("lsp-"))



(register-definition-prefixes "lsp-kubernetes-helm" '("lsp-kubernetes-helm-"))



(autoload 'lsp-lens--enable "lsp-lens" "\
Enable lens mode.")
(autoload 'lsp-lens-show "lsp-lens" "\
Display lenses in the buffer." t)
(autoload 'lsp-lens-hide "lsp-lens" "\
Delete all lenses." t)
(autoload 'lsp-lens-mode "lsp-lens" "\
Toggle code-lens overlays.

This is a minor mode.  If called interactively, toggle the `Lsp-Lens
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-lens-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'lsp-avy-lens "lsp-lens" "\
Click lsp lens using `avy' package." t)
(register-definition-prefixes "lsp-lens" '("lsp-"))



(autoload 'lsp-lisp-alive-start-ls "lsp-lisp" "\
Start the alive-lsp." t)
(register-definition-prefixes "lsp-lisp" '("lsp-lisp-a"))



(register-definition-prefixes "lsp-lua" '("lsp-"))



(register-definition-prefixes "lsp-magik" '("lsp-magik-"))



(register-definition-prefixes "lsp-markdown" '("lsp-markdown-"))



(register-definition-prefixes "lsp-marksman" '("lsp-marksman-"))



(register-definition-prefixes "lsp-matlab" '("lsp-clients-matlab-" "matlabls-command"))



(register-definition-prefixes "lsp-mdx" '("lsp-mdx-server-command"))



(register-definition-prefixes "lsp-meson" '("lsp-meson-"))



(register-definition-prefixes "lsp-mint" '("lsp-clients-mint-executable"))



(put 'lsp-enable-file-watchers 'safe-local-variable #'booleanp)
(put 'lsp-file-watch-ignored-directories 'safe-local-variable 'lsp--string-listp)
(put 'lsp-file-watch-ignored-files 'safe-local-variable 'lsp--string-listp)
(put 'lsp-file-watch-threshold 'safe-local-variable (lambda (i) (or (numberp i) (not i))))
(autoload 'lsp--string-listp "lsp-mode" "\
Return t if all elements of SEQUENCE are strings, else nil.

(fn SEQUENCE)")
(autoload 'lsp-load-vscode-workspace "lsp-mode" "\
Load vscode workspace from FILE

(fn FILE)" t)
(autoload 'lsp-save-vscode-workspace "lsp-mode" "\
Save vscode workspace to FILE

(fn FILE)" t)
(autoload 'lsp-install-server "lsp-mode" "\
Interactively install or re-install server.
When prefix UPDATE? is t force installation even if the server is present.

(fn UPDATE? &optional SERVER-ID)" t)
(autoload 'lsp-uninstall-server "lsp-mode" "\
Delete a LSP server from `lsp-server-install-dir'.

(fn DIR)" t)
(autoload 'lsp-uninstall-servers "lsp-mode" "\
Uninstall all installed servers." t)
(autoload 'lsp-update-server "lsp-mode" "\
Interactively update (reinstall) a server.

(fn &optional SERVER-ID)" t)
(autoload 'lsp-update-servers "lsp-mode" "\
Update (reinstall) all installed servers." t)
(autoload 'lsp-ensure-server "lsp-mode" "\
Ensure server SERVER-ID

(fn SERVER-ID)")
(autoload 'lsp "lsp-mode" "\
Entry point for the server startup.
When ARG is t the lsp mode will start new language server even if
there is language server which can handle current language. When
ARG is nil current file will be opened in multi folder language
server if there is such. When `lsp' is called with prefix
argument ask the user to select which language server to start.

(fn &optional ARG)" t)
(autoload 'lsp-deferred "lsp-mode" "\
Entry point that defers server startup until buffer is visible.
`lsp-deferred' will wait until the buffer is visible before invoking `lsp'.
This avoids overloading the server with many files when starting Emacs.")
(autoload 'lsp-start-plain "lsp-mode" "\
Start `lsp-mode' using minimal configuration using the latest `melpa' version
of the packages.

In case the major-mode that you are using for " t)
(register-definition-prefixes "lsp-mode" '("defcustom-lsp" "lsp-" "make-lsp-client" "when-lsp-workspace" "with-lsp-workspace"))



(define-obsolete-variable-alias 'lsp-diagnostics-modeline-scope 'lsp-modeline-diagnostics-scope "\
lsp-mode 7.0.1")
(autoload 'lsp-modeline-code-actions-mode "lsp-modeline" "\
Toggle code actions on modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Code-Actions mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-modeline-code-actions-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(define-obsolete-function-alias 'lsp-diagnostics-modeline-mode 'lsp-modeline-diagnostics-mode "lsp-mode 7.0.1")
(autoload 'lsp-modeline-diagnostics-mode "lsp-modeline" "\
Toggle diagnostics modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Diagnostics mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-modeline-diagnostics-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'lsp-modeline-workspace-status-mode "lsp-modeline" "\
Toggle workspace status on modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Workspace-Status mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-modeline-workspace-status-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-modeline" '("lsp-"))



(register-definition-prefixes "lsp-mojo" '("lsp-mojo-executable"))



(register-definition-prefixes "lsp-move" '("lsp-clients-"))



(register-definition-prefixes "lsp-nextflow" '("lsp-nextflow-"))



(register-definition-prefixes "lsp-nginx" '("lsp-nginx-"))



(register-definition-prefixes "lsp-nim" '("lsp-nim-l"))



(register-definition-prefixes "lsp-nix" '("lsp-nix-"))



(register-definition-prefixes "lsp-nushell" '("lsp-nushell-language-server-command"))



(register-definition-prefixes "lsp-ocaml" '("lsp-"))



(register-definition-prefixes "lsp-openscad" '("lsp-openscad-"))



(register-definition-prefixes "lsp-perl" '("lsp-perl-"))



(register-definition-prefixes "lsp-perlnavigator" '("lsp-perlnavigator-"))



(register-definition-prefixes "lsp-php" '("lsp-"))



(register-definition-prefixes "lsp-pls" '("lsp-pls-"))



(register-definition-prefixes "lsp-postgres" '("lsp-postgres-"))



(register-definition-prefixes "lsp-prolog" '("lsp-prolog-server-command"))



(register-definition-prefixes "lsp-protocol" '("dash-expand:&RangeToPoint" "lsp"))



(register-definition-prefixes "lsp-purescript" '("lsp-purescript-"))



(register-definition-prefixes "lsp-pwsh" '("lsp-pwsh-"))



(register-definition-prefixes "lsp-pyls" '("lsp-"))



(register-definition-prefixes "lsp-pylsp" '("lsp-"))



(register-definition-prefixes "lsp-python-ty" '("lsp-python-ty-clients-server-command"))



(register-definition-prefixes "lsp-qml" '("lsp-qml-server-command"))



(register-definition-prefixes "lsp-r" '("lsp-clients-r-server-command"))



(register-definition-prefixes "lsp-racket" '("lsp-racket-lang"))



(register-definition-prefixes "lsp-remark" '("lsp-remark-server-command"))



(register-definition-prefixes "lsp-rf" '("expand-start-command" "lsp-rf-language-server-" "parse-rf-language-server-"))



(register-definition-prefixes "lsp-roslyn" '("lsp-roslyn-"))



(register-definition-prefixes "lsp-rpm-spec" '("lsp-rpm-spec-"))



(register-definition-prefixes "lsp-rubocop" '("lsp-rubocop-"))



(register-definition-prefixes "lsp-ruby-lsp" '("lsp-ruby-lsp-"))



(register-definition-prefixes "lsp-ruby-syntax-tree" '("lsp-ruby-syntax-tree-"))



(register-definition-prefixes "lsp-ruff" '("lsp-ruff-"))



(register-definition-prefixes "lsp-rust" '("lsp-"))



(defvar-local semantic-token-modifier-cache (make-hash-table) "\
A cache of modifier values to the selected fonts.
This allows whole-bitmap lookup instead of checking each bit. The
expectation is that usage of modifiers will tend to cluster, so
we will not have the full range of possible usages, hence a
tractable hash map.

This is set as buffer-local. It should probably be shared in a
given workspace/language-server combination.

This cache should be flushed every time any modifier
configuration changes.")
(autoload 'lsp--semantic-tokens-initialize-buffer "lsp-semantic-tokens" "\
Initialize the buffer for semantic tokens.
IS-RANGE-PROVIDER is non-nil when server supports range requests.")
(autoload 'lsp--semantic-tokens-initialize-workspace "lsp-semantic-tokens" "\
Initialize semantic tokens for WORKSPACE.

(fn WORKSPACE)")
(autoload 'lsp-semantic-tokens--warn-about-deprecated-setting "lsp-semantic-tokens" "\
Warn about deprecated semantic highlighting variable.")
(autoload 'lsp-semantic-tokens--enable "lsp-semantic-tokens" "\
Enable semantic tokens mode.")
(autoload 'lsp-semantic-tokens-mode "lsp-semantic-tokens" "\
Toggle semantic-tokens support.

This is a minor mode.  If called interactively, toggle the
`Lsp-Semantic-Tokens mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-semantic-tokens-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-semantic-tokens" '("lsp-"))



(register-definition-prefixes "lsp-semgrep" '("lsp-semgrep-" "semgrep-"))



(register-definition-prefixes "lsp-sml" '("lsp-sml-millet-"))



(register-definition-prefixes "lsp-solargraph" '("lsp-solargraph-"))



(register-definition-prefixes "lsp-solidity" '("lsp-client--solidity-"))



(register-definition-prefixes "lsp-sorbet" '("lsp-sorbet-"))



(register-definition-prefixes "lsp-sql" '("lsp-sql-"))



(register-definition-prefixes "lsp-sqls" '("lsp-sql"))



(register-definition-prefixes "lsp-steep" '("lsp-steep-"))



(register-definition-prefixes "lsp-svelte" '("lsp-svelte-plugin-"))



(register-definition-prefixes "lsp-terraform" '("construct-tf-package" "lsp-t"))



(register-definition-prefixes "lsp-tex" '("lsp-"))



(register-definition-prefixes "lsp-toml" '("lsp-toml-"))



(register-definition-prefixes "lsp-toml-tombi" '("lsp-tombi-toml-"))



(register-definition-prefixes "lsp-trunk" '("lsp-trunk-"))



(register-definition-prefixes "lsp-ts-query" '("lsp-ts-query-"))



(register-definition-prefixes "lsp-ttcn3" '("lsp-ttcn3-lsp-server-command"))



(register-definition-prefixes "lsp-typeprof" '("lsp-typeprof-"))



(register-definition-prefixes "lsp-typespec" '("lsp-typespec-"))



(register-definition-prefixes "lsp-v" '("lsp-v-"))



(register-definition-prefixes "lsp-vala" '("lsp-clients-vala-ls-executable"))



(register-definition-prefixes "lsp-verilog" '("lsp-clients-"))



(register-definition-prefixes "lsp-vetur" '("lsp-vetur-"))



(register-definition-prefixes "lsp-vhdl" '("ghdl-ls-bin-name" "hdl-checker-bin-name" "lsp-vhdl-" "vhdl-"))



(register-definition-prefixes "lsp-vimscript" '("lsp-clients-vim-"))



(register-definition-prefixes "lsp-volar" '("lsp-volar-"))



(register-definition-prefixes "lsp-wgsl" '("lsp-wgsl-"))



(register-definition-prefixes "lsp-xml" '("lsp-xml-"))



(register-definition-prefixes "lsp-yaml" '("lsp-"))



(register-definition-prefixes "lsp-yang" '("lsp-yang-"))



(register-definition-prefixes "lsp-zig" '("lsp-z"))


(provide 'lsp-mode-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/lsp-pyright-20250301.131/lsp-pyright-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "lsp-pyright" '("lsp-pyright-"))


(provide 'lsp-pyright-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/goto-chg-20240407.1110/goto-chg-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'goto-last-change "goto-chg" "\
Go to the point where the last edit was made in the current buffer.
Repeat the command to go to the second last edit, etc.

To go back to more recent edit, the reverse of this command, use \\[goto-last-change-reverse]
or precede this command with \\[universal-argument] - (minus).

It does not go to the same point twice even if there has been many edits
there. I call the minimal distance between distinguishable edits \"span\".
Set variable `glc-default-span' to control how close is \"the same point\".
Default span is 8.
The span can be changed temporarily with \\[universal-argument] right before \\[goto-last-change]:
\\[universal-argument] <NUMBER> set current span to that number,
\\[universal-argument] (no number) multiplies span by 4, starting with default.
The so set span remains until it is changed again with \\[universal-argument], or the consecutive
repetition of this command is ended by any other command.

When span is zero (i.e. \\[universal-argument] 0) subsequent \\[goto-last-change] visits each and
every point of edit and a message shows what change was made there.
In this case it may go to the same point twice.

This command uses undo information. If undo is disabled, so is this command.
At times, when undo information becomes too large, the oldest information is
discarded. See variable `undo-limit'.

(fn ARG)" t)
(autoload 'goto-last-change-reverse "goto-chg" "\
Go back to more recent changes after \\[goto-last-change] have been used.
See `goto-last-change' for use of prefix argument.

(fn ARG)" t)
(register-definition-prefixes "goto-chg" '("glc-"))


(provide 'goto-chg-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/flexoki-themes-20250228.1934/flexoki-themes-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(and load-file-name (boundp 'custom-theme-load-path) (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))
(register-definition-prefixes "flexoki-themes" '("flexoki-themes-"))



(register-definition-prefixes "flexoki-themes-dark-theme" '("flexoki-themes-dark"))



(register-definition-prefixes "flexoki-themes-light-theme" '("flexoki-themes-light"))


(provide 'flexoki-themes-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/evil-20250318.1816/evil-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "evil-command-window" '("evil-"))



(register-definition-prefixes "evil-commands" '("evil-"))



(register-definition-prefixes "evil-common" '("bounds-of-evil-" "evil-" "forward-evil-"))



 (autoload 'evil-mode "evil" nil t)
(register-definition-prefixes "evil-core" '("evil-" "turn-o"))



(autoload 'evil-digraph "evil-digraphs" "\
Convert DIGRAPH to character or list representation.
If DIGRAPH is a list (CHAR1 CHAR2), return the corresponding character;
if DIGRAPH is a character, return the corresponding list.
Searches in `evil-digraphs-table-user' and `evil-digraphs-table'.

(fn DIGRAPH)")
(register-definition-prefixes "evil-digraphs" '("evil-digraphs-table"))



(register-definition-prefixes "evil-ex" '("evil-"))



(register-definition-prefixes "evil-integration" '("evil-"))



(register-definition-prefixes "evil-jumps" '("evil-"))



(register-definition-prefixes "evil-keybindings" '("evil--set-motion-state"))



(register-definition-prefixes "evil-macros" '("evil-"))



(register-definition-prefixes "evil-maps" '("evil-"))



(register-definition-prefixes "evil-repeat" '("evil-"))



(register-definition-prefixes "evil-search" '("evil-"))



(register-definition-prefixes "evil-states" '("evil-"))



(register-definition-prefixes "evil-types" '("evil-ex-get-optional-register-and-count"))



(register-definition-prefixes "evil-vars" '("evil-"))


(provide 'evil-autoloads)


)
(let* ((load-file-name "/home/mespyr/.config/emacs/elpa/consult-20250609.1616/consult-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'consult-completion-in-region "consult" "\
Use minibuffer completion as the UI for `completion-at-point'.

The arguments START, END, COLLECTION and PREDICATE and expected return
value are as specified for `completion-in-region'.  Use this function as
a value for `completion-in-region-function'.

(fn START END COLLECTION PREDICATE)")
(autoload 'consult-outline "consult" "\
Jump to an outline heading, obtained by matching against `outline-regexp'.

This command supports narrowing to a heading level and candidate
preview.  The initial narrowing LEVEL can be given as prefix
argument.  The symbol at point is added to the future history.

(fn &optional LEVEL)" t)
(autoload 'consult-mark "consult" "\
Jump to a marker in MARKERS list (defaults to buffer-local `mark-ring').

The command supports preview of the currently selected marker position.
The symbol at point is added to the future history.

(fn &optional MARKERS)" t)
(autoload 'consult-global-mark "consult" "\
Jump to a marker in MARKERS list (defaults to `global-mark-ring').

The command supports preview of the currently selected marker position.
The symbol at point is added to the future history.

(fn &optional MARKERS)" t)
(autoload 'consult-line "consult" "\
Search for a matching line.

Depending on the setting `consult-point-placement' the command
jumps to the beginning or the end of the first match on the line
or the line beginning.  The default candidate is the non-empty
line next to point.  This command obeys narrowing.  Optional
INITIAL input can be provided.  The search starting point is
changed if the START prefix argument is set.  The symbol at point
and the last `isearch-string' is added to the future history.

(fn &optional INITIAL START)" t)
(autoload 'consult-line-multi "consult" "\
Search for a matching line in multiple buffers.

By default search across all project buffers.  If the prefix
argument QUERY is non-nil, all buffers are searched.  Optional
INITIAL input can be provided.  The symbol at point and the last
`isearch-string' is added to the future history.  In order to
search a subset of buffers, QUERY can be set to a plist according
to `consult--buffer-query'.

(fn QUERY &optional INITIAL)" t)
(autoload 'consult-keep-lines "consult" "\
Filter a subset of the lines in the current buffer with live preview.

The filtered lines are kept and the other lines are deleted.  When
called interactively, the lines selected are those that match the
minibuffer input.  In order to match the inverse of the input, prefix
the input with `! '.  When called from Elisp, the filtering is performed
by a FILTER function.  If the buffer is narrowed to a region, the
command only acts on this region.  See also `consult-focus-lines' which
uses overlays to display only matching lines, but does not modify the
buffer.

FILTER is the filter function, called for each line.
INITIAL is the initial input.

(fn FILTER &optional INITIAL)" t)
(autoload 'consult-focus-lines "consult" "\
Show only matching lines using overlays.

In contrast to `consult-keep-lines' the buffer is not modified.  The
FILTER selects the lines which are shown.  When called interactively,
the lines selected are those that match the minibuffer input.  In order
to match the inverse of the input, prefix the input with `! '.  With
optional prefix argument SHOW reveal the hidden lines.  Alternatively
rerun the command and exit the minibuffer directly without input to
reveal the lines.  When called from Elisp, the filtering is performed by
a FILTER function.  If the buffer is narrowed to a region, the command
only acts on this region.

FILTER is the filter function, called for each line.
SHOW is the prefix argument, if non-nil reveal all hidden lines.
INITIAL is the initial input.

(fn FILTER &optional SHOW INITIAL)" t)
(autoload 'consult-goto-line "consult" "\
Read line number and jump to the line with preview.

Enter either a line number to jump to the first column of the
given line or line:column in order to jump to a specific column.
Jump directly if a line number is given as prefix ARG.  The
command respects narrowing and the settings
`consult-goto-line-numbers' and `consult-line-numbers-widen'.

(fn &optional ARG)" t)
(autoload 'consult-recent-file "consult" "\
Find recent file using `completing-read'." t)
(autoload 'consult-mode-command "consult" "\
Run a command from any of the given MODES.

If no MODES are specified, use currently active major and minor modes.

(fn &rest MODES)" t)
(autoload 'consult-yank-from-kill-ring "consult" "\
Select STRING from the kill ring and insert it.
With prefix ARG, put point at beginning, and mark at end, like `yank' does.

This command behaves like `yank-from-kill-ring', which also offers a
`completing-read' interface to the `kill-ring'.  Additionally the
Consult version supports preview of the selected string.

(fn STRING &optional ARG)" t)
(autoload 'consult-yank-pop "consult" "\
If there is a recent yank act like `yank-pop'.

Otherwise select string from the kill ring and insert it.
See `yank-pop' for the meaning of ARG.

This command behaves like `yank-pop', which also offers a
`completing-read' interface to the `kill-ring'.  Additionally the
Consult version supports preview of the selected string.

(fn &optional ARG)" t)
(autoload 'consult-yank-replace "consult" "\
Select STRING from the kill ring.

If there was no recent yank, insert the string.
Otherwise replace the just-yanked string with the selected string.

(fn STRING)" t)
(autoload 'consult-bookmark "consult" "\
If bookmark NAME exists, open it, otherwise create a new bookmark with NAME.

The command supports preview of file bookmarks and narrowing.  See the
variable `consult-bookmark-narrow' for the narrowing configuration.

(fn NAME)" t)
(autoload 'consult-complex-command "consult" "\
Select and evaluate command from the command history.

This command can act as a drop-in replacement for `repeat-complex-command'." t)
(autoload 'consult-history "consult" "\
Insert string from HISTORY of current buffer.
In order to select from a specific HISTORY, pass the history
variable as argument.  INDEX is the name of the index variable to
update, if any.  BOL is the function which jumps to the beginning
of the prompt.  See also `cape-history' from the Cape package.

(fn &optional HISTORY INDEX BOL)" t)
(autoload 'consult-isearch-history "consult" "\
Read a search string with completion from the Isearch history.

This replaces the current search string if Isearch is active, and
starts a new Isearch session otherwise." t)
(autoload 'consult-minor-mode-menu "consult" "\
Enable or disable minor mode.

This is an alternative to `minor-mode-menu-from-indicator'." t)
(autoload 'consult-theme "consult" "\
Disable current themes and enable THEME from `consult-themes'.

The command supports previewing the currently selected theme.

(fn THEME)" t)
(autoload 'consult-buffer "consult" "\
Enhanced `switch-to-buffer' command with support for virtual buffers.

The command supports recent files, bookmarks, views and project files as
virtual buffers.  Buffers are previewed.  Narrowing to buffers (b), files (f),
bookmarks (m) and project files (p) is supported via the corresponding
keys.  In order to determine the project-specific files and buffers, the
`consult-project-function' is used.  The virtual buffer SOURCES
default to `consult-buffer-sources'.  See `consult--multi' for the
configuration of the virtual buffer sources.

(fn &optional SOURCES)" t)
(autoload 'consult-project-buffer "consult" "\
Enhanced `project-switch-to-buffer' command with support for virtual buffers.
The command may prompt you for a project directory if it is invoked from
outside a project.  See `consult-buffer' for more details." t)
(autoload 'consult-buffer-other-window "consult" "\
Variant of `consult-buffer', switching to a buffer in another window." t)
(autoload 'consult-buffer-other-frame "consult" "\
Variant of `consult-buffer', switching to a buffer in another frame." t)
(autoload 'consult-buffer-other-tab "consult" "\
Variant of `consult-buffer', switching to a buffer in another tab." t)
(autoload 'consult-grep "consult" "\
Search with `grep' for files in DIR where the content matches a regexp.

The initial input is given by the INITIAL argument.  DIR can be nil, a
directory string or a list of file/directory paths.  If `consult-grep'
is called interactively with a prefix argument, the user can specify the
directories or files to search in.  Multiple directories or files must
be separated by comma in the minibuffer, since they are read via
`completing-read-multiple'.  By default the project directory is used if
`consult-project-function' is defined and returns non-nil.  Otherwise
the `default-directory' is searched.  If the command is invoked with a
double prefix argument (twice `C-u') the user is asked for a project, if
not yet inside a project, or the current project is searched.

The input string is split, the first part of the string (grep input) is
passed to the asynchronous grep process and the second part of the
string is passed to the completion-style filtering.

The input string is split at a punctuation character, which is given as
the first character of the input string.  The format is similar to
Perl-style regular expressions, e.g., /regexp/.  Furthermore command
line options can be passed to grep, specified behind --.  The overall
prompt input has the form `#async-input -- grep-opts#filter-string'.

Note that the grep input string is transformed from Emacs regular
expressions to Posix regular expressions.  Always enter Emacs regular
expressions at the prompt.  `consult-grep' behaves like builtin Emacs
search commands, e.g., Isearch, which take Emacs regular expressions.
Furthermore the asynchronous input split into words, each word must
match separately and in any order.  See `consult--regexp-compiler' for
the inner workings.  In order to disable transformations of the grep
input, adjust `consult--regexp-compiler' accordingly.

Here we give a few example inputs:

#alpha beta         : Search for alpha and beta in any order.
#alpha.*beta        : Search for alpha before beta.
#\\(alpha\\|beta\\) : Search for alpha or beta (Note Emacs syntax!)
#word -- -C3        : Search for word, include 3 lines as context
#first#second       : Search for first, quick filter for second.

The symbol at point is added to the future history.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-git-grep "consult" "\
Search with `git grep' for files in DIR with INITIAL input.
See `consult-grep' for details.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-ripgrep "consult" "\
Search with `rg' for files in DIR with INITIAL input.
See `consult-grep' for details.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-find "consult" "\
Search for files with `find' in DIR.
The file names must match the input regexp.  INITIAL is the
initial minibuffer input.  See `consult-grep' for details
regarding the asynchronous search and the arguments.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-fd "consult" "\
Search for files with `fd' in DIR.
The file names must match the input regexp.  INITIAL is the
initial minibuffer input.  See `consult-grep' for details
regarding the asynchronous search and the arguments.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-locate "consult" "\
Search with `locate' for files which match input given INITIAL input.

The input is treated literally such that locate can take advantage of
the locate database index.  Regular expressions would often force a slow
linear search through the entire database.  The locate process is started
asynchronously, similar to `consult-grep'.  See `consult-grep' for more
details regarding the asynchronous search.

(fn &optional INITIAL)" t)
(autoload 'consult-man "consult" "\
Search for man page given INITIAL input.

The input string is not preprocessed and passed literally to the
underlying man commands.  The man process is started asynchronously,
similar to `consult-grep'.  See `consult-grep' for more details regarding
the asynchronous search.

(fn &optional INITIAL)" t)
(register-definition-prefixes "consult" '("consult-"))



(autoload 'consult-compile-error "consult-compile" "\
Jump to a compilation error in the current buffer.

This command collects entries from compilation buffers and grep buffers
related to the current buffer.  The command supports preview of the
currently selected error.  With prefix ARG, jump to the error message in
the compilation buffer, instead of to the actual location of the error.

(fn &optional ARG)" t)
(register-definition-prefixes "consult-compile" '("consult-compile--"))



(autoload 'consult-flymake "consult-flymake" "\
Jump to Flymake diagnostic.
When PROJECT is non-nil then prompt with diagnostics from all
buffers in the current project instead of just the current buffer.

(fn &optional PROJECT)" t)
(register-definition-prefixes "consult-flymake" '("consult-flymake--"))



(autoload 'consult-imenu "consult-imenu" "\
Select item from flattened `imenu' using `completing-read' with preview.

The command supports preview and narrowing.  See the variable
`consult-imenu-config', which configures the narrowing.
The symbol at point is added to the future history.

See also `consult-imenu-multi'." t)
(autoload 'consult-imenu-multi "consult-imenu" "\
Select item from the imenus of all buffers from the same project.

In order to determine the buffers belonging to the same project, the
`consult-project-function' is used.  Only the buffers with the
same major mode as the current buffer are used.  See also
`consult-imenu' for more details.  In order to search a subset of buffers,
QUERY can be set to a plist according to `consult--buffer-query'.

(fn &optional QUERY)" t)
(register-definition-prefixes "consult-imenu" '("consult-imenu-"))



(autoload 'consult-info "consult-info" "\
Full text search through info MANUALS.

(fn &rest MANUALS)" t)
(defun consult-info-define (name &rest manuals) "\
Define `consult-info-NAME' command to search through MANUALS.
MANUALS is a list of a strings. NAME can be a symbol or a string. If
NAME is a string, it is added to the MANUALS list. Return name of
defined command as symbol." (let ((cmd (intern (format "consult-info-%s" name)))) (when (stringp name) (push name manuals)) (defalias cmd (lambda nil (interactive) (apply #'consult-info manuals)) (format "Search via `consult-info' through the manual%s %s:\n\n%s" (if (cdr manuals) "s" "") (mapconcat (lambda (m) (format "\"%s\"" m)) manuals ", ") (mapconcat (lambda (m) (format "  * Info node `(%s)'" m)) manuals "\n"))) cmd))
(register-definition-prefixes "consult-info" '("consult-info--"))



(autoload 'consult-kmacro "consult-kmacro" "\
Run a chosen keyboard macro.

With prefix ARG, run the macro that many times.
Macros containing mouse clicks are omitted.

(fn ARG)" t)
(register-definition-prefixes "consult-kmacro" '("consult-kmacro--"))



(autoload 'consult-org-heading "consult-org" "\
Jump to an Org heading.

MATCH and SCOPE are as in `org-map-entries' and determine which
entries are offered.  By default, all entries of the current
buffer are offered.

(fn &optional MATCH SCOPE)" t)
(autoload 'consult-org-agenda "consult-org" "\
Jump to an Org agenda heading.

By default, all agenda entries are offered.  MATCH is as in
`org-map-entries' and can used to refine this.

(fn &optional MATCH)" t)
(register-definition-prefixes "consult-org" '("consult-org--"))



(autoload 'consult-register-window "consult-register" "\
Enhanced drop-in replacement for `register-preview'.

BUFFER is the window buffer.
SHOW-EMPTY must be t if the window should be shown for an empty register list.
Optional argument PRED specifies the types of register to show.

(fn BUFFER &optional SHOW-EMPTY PRED)")
(autoload 'consult-register-format "consult-register" "\
Enhanced preview of register REG.
This function can be used as `register-preview-function'.
If COMPLETION is non-nil format the register for completion.

(fn REG &optional COMPLETION)")
(autoload 'consult-register "consult-register" "\
Load register and either jump to location or insert the stored text.

This command is useful to search the register contents.  For quick access
to registers it is still recommended to use the register functions
`consult-register-load' and `consult-register-store' or the built-in
built-in register access functions.  The command supports narrowing, see
`consult-register--narrow'.  Marker positions are previewed.  See
`jump-to-register' and `insert-register' for the meaning of prefix ARG.

(fn &optional ARG)" t)
(autoload 'consult-register-load "consult-register" "\
Do what I mean with a REG.

For a window configuration, restore it.  For a number or text, insert it.
For a location, jump to it.  See `jump-to-register' and `insert-register'
for the meaning of prefix ARG.

(fn REG &optional ARG)" t)
(autoload 'consult-register-store "consult-register" "\
Store register dependent on current context, showing an action menu.

With an active region, store/append/prepend the contents, optionally
deleting the region when a prefix ARG is given.  With a numeric prefix
ARG, store or add the number.  Otherwise store point, frameset, window or
kmacro.

(fn ARG)" t)
(register-definition-prefixes "consult-register" '("consult-register-"))



(autoload 'consult-xref "consult-xref" "\
Show xrefs with preview in the minibuffer.

This function can be used for `xref-show-xrefs-function'.
See `xref-show-xrefs-function' for the description of the
FETCHER and ALIST arguments.

(fn FETCHER &optional ALIST)")
(register-definition-prefixes "consult-xref" '("consult-xref--"))


(provide 'consult-autoloads)


)
(defvar package-activated-list)
(setq package-activated-list
	  (delete-dups
	   (append
		'(vterm vterm-toggle vertico tsc tree-sitter tree-sitter-langs
				spinner simple-modeline s orderless markdown-mode
				marginalia lv dash f ht lsp-mode lsp-pyright goto-chg
				flexoki-themes evil consult)
		package-activated-list)))
(progn
  (require 'info) (info-initialize)
  (setq Info-directory-list
		(append
		 '("/home/mespyr/.config/emacs/elpa/evil-20250318.1816"
		   "/home/mespyr/.config/emacs/elpa/dash-20250312.1307"
		   "/home/mespyr/.config/emacs/elpa/orderless-20250316.2046")
		 Info-directory-list)))

;; Local Variables:
;; version-control: never
;; no-update-autoloads: t
;; byte-compile-warnings: (not make-local)
;; End:
